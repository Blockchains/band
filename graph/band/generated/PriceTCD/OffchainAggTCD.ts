// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class DataUpdated extends EthereumEvent {
  get params(): DataUpdated__Params {
    return new DataUpdated__Params(this);
  }
}

export class DataUpdated__Params {
  _event: DataUpdated;

  constructor(event: DataUpdated) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class DataSourceRegistered extends EthereumEvent {
  get params(): DataSourceRegistered__Params {
    return new DataSourceRegistered__Params(this);
  }
}

export class DataSourceRegistered__Params {
  _event: DataSourceRegistered;

  constructor(event: DataSourceRegistered) {
    this._event = event;
  }

  get dataSource(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stake(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DataSourceStaked extends EthereumEvent {
  get params(): DataSourceStaked__Params {
    return new DataSourceStaked__Params(this);
  }
}

export class DataSourceStaked__Params {
  _event: DataSourceStaked;

  constructor(event: DataSourceStaked) {
    this._event = event;
  }

  get dataSource(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stake(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DataSourceUnstaked extends EthereumEvent {
  get params(): DataSourceUnstaked__Params {
    return new DataSourceUnstaked__Params(this);
  }
}

export class DataSourceUnstaked__Params {
  _event: DataSourceUnstaked;

  constructor(event: DataSourceUnstaked) {
    this._event = event;
  }

  get dataSource(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get unstake(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeDistributed extends EthereumEvent {
  get params(): FeeDistributed__Params {
    return new FeeDistributed__Params(this);
  }
}

export class FeeDistributed__Params {
  _event: FeeDistributed;

  constructor(event: FeeDistributed) {
    this._event = event;
  }

  get dataSource(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ownerReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawReceiptCreated extends EthereumEvent {
  get params(): WithdrawReceiptCreated__Params {
    return new WithdrawReceiptCreated__Params(this);
  }
}

export class WithdrawReceiptCreated__Params {
  _event: WithdrawReceiptCreated;

  constructor(event: WithdrawReceiptCreated) {
    this._event = event;
  }

  get receiptIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get withdrawTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawReceiptUnlocked extends EthereumEvent {
  get params(): WithdrawReceiptUnlocked__Params {
    return new WithdrawReceiptUnlocked__Params(this);
  }
}

export class WithdrawReceiptUnlocked__Params {
  _event: WithdrawReceiptUnlocked;

  constructor(event: WithdrawReceiptUnlocked) {
    this._event = event;
  }

  get receiptIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Query extends EthereumEvent {
  get params(): Query__Params {
    return new Query__Params(this);
  }
}

export class Query__Params {
  _event: Query;

  constructor(event: Query) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get input(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get status(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OffchainAggTCD__withdrawReceiptsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromBoolean(this.value3));
    return map;
  }
}

export class OffchainAggTCD__infoMapResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OffchainAggTCD extends SmartContract {
  static bind(address: Address): OffchainAggTCD {
    return new OffchainAggTCD("OffchainAggTCD", address);
  }

  reserveCount(): BigInt {
    let result = super.call("reserveCount", []);

    return result[0].toBigInt();
  }

  try_reserveCount(): CallResult<BigInt> {
    let result = super.tryCall("reserveCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  undistributedReward(): BigInt {
    let result = super.call("undistributedReward", []);

    return result[0].toBigInt();
  }

  try_undistributedReward(): CallResult<BigInt> {
    let result = super.tryCall("undistributedReward", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  activeCount(): BigInt {
    let result = super.call("activeCount", []);

    return result[0].toBigInt();
  }

  try_activeCount(): CallResult<BigInt> {
    let result = super.tryCall("activeCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withdrawReceipts(param0: BigInt): OffchainAggTCD__withdrawReceiptsResult {
    let result = super.call("withdrawReceipts", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new OffchainAggTCD__withdrawReceiptsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_withdrawReceipts(
    param0: BigInt
  ): CallResult<OffchainAggTCD__withdrawReceiptsResult> {
    let result = super.tryCall("withdrawReceipts", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OffchainAggTCD__withdrawReceiptsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  prefix(): Bytes {
    let result = super.call("prefix", []);

    return result[0].toBytes();
  }

  try_prefix(): CallResult<Bytes> {
    let result = super.tryCall("prefix", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  registry(): Address {
    let result = super.call("registry", []);

    return result[0].toAddress();
  }

  try_registry(): CallResult<Address> {
    let result = super.tryCall("registry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getStake(dataSource: Address, staker: Address): BigInt {
    let result = super.call("getStake", [
      EthereumValue.fromAddress(dataSource),
      EthereumValue.fromAddress(staker)
    ]);

    return result[0].toBigInt();
  }

  try_getStake(dataSource: Address, staker: Address): CallResult<BigInt> {
    let result = super.tryCall("getStake", [
      EthereumValue.fromAddress(dataSource),
      EthereumValue.fromAddress(staker)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getOwnership(dataSource: Address, staker: Address): BigInt {
    let result = super.call("getOwnership", [
      EthereumValue.fromAddress(dataSource),
      EthereumValue.fromAddress(staker)
    ]);

    return result[0].toBigInt();
  }

  try_getOwnership(dataSource: Address, staker: Address): CallResult<BigInt> {
    let result = super.tryCall("getOwnership", [
      EthereumValue.fromAddress(dataSource),
      EthereumValue.fromAddress(staker)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  params(): Address {
    let result = super.call("params", []);

    return result[0].toAddress();
  }

  try_params(): CallResult<Address> {
    let result = super.tryCall("params", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  infoMap(param0: Address): OffchainAggTCD__infoMapResult {
    let result = super.call("infoMap", [EthereumValue.fromAddress(param0)]);

    return new OffchainAggTCD__infoMapResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_infoMap(param0: Address): CallResult<OffchainAggTCD__infoMapResult> {
    let result = super.tryCall("infoMap", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OffchainAggTCD__infoMapResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  bondingCurve(): Address {
    let result = super.call("bondingCurve", []);

    return result[0].toAddress();
  }

  try_bondingCurve(): CallResult<Address> {
    let result = super.tryCall("bondingCurve", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  queryPrice(): BigInt {
    let result = super.call("queryPrice", []);

    return result[0].toBigInt();
  }

  try_queryPrice(): CallResult<BigInt> {
    let result = super.tryCall("queryPrice", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class DistributeFeeCall extends EthereumCall {
  get inputs(): DistributeFeeCall__Inputs {
    return new DistributeFeeCall__Inputs(this);
  }

  get outputs(): DistributeFeeCall__Outputs {
    return new DistributeFeeCall__Outputs(this);
  }
}

export class DistributeFeeCall__Inputs {
  _call: DistributeFeeCall;

  constructor(call: DistributeFeeCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DistributeFeeCall__Outputs {
  _call: DistributeFeeCall;

  constructor(call: DistributeFeeCall) {
    this._call = call;
  }
}

export class RegisterCall extends EthereumCall {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get dataSource(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get prevDataSource(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialStake(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class UnstakeCall extends EthereumCall {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get dataSource(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get prevDataSource(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newPrevDataSource(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get withdrawOwnership(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class StakeCall extends EthereumCall {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get dataSource(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get prevDataSource(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newPrevDataSource(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnlockTokenFromReceiptCall extends EthereumCall {
  get inputs(): UnlockTokenFromReceiptCall__Inputs {
    return new UnlockTokenFromReceiptCall__Inputs(this);
  }

  get outputs(): UnlockTokenFromReceiptCall__Outputs {
    return new UnlockTokenFromReceiptCall__Outputs(this);
  }
}

export class UnlockTokenFromReceiptCall__Inputs {
  _call: UnlockTokenFromReceiptCall;

  constructor(call: UnlockTokenFromReceiptCall) {
    this._call = call;
  }

  get receiptId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockTokenFromReceiptCall__Outputs {
  _call: UnlockTokenFromReceiptCall;

  constructor(call: UnlockTokenFromReceiptCall) {
    this._call = call;
  }
}

export class QueryCall extends EthereumCall {
  get inputs(): QueryCall__Inputs {
    return new QueryCall__Inputs(this);
  }

  get outputs(): QueryCall__Outputs {
    return new QueryCall__Outputs(this);
  }
}

export class QueryCall__Inputs {
  _call: QueryCall;

  constructor(call: QueryCall) {
    this._call = call;
  }

  get input(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class QueryCall__Outputs {
  _call: QueryCall;

  constructor(call: QueryCall) {
    this._call = call;
  }

  get output(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get updatedAt(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get status(): i32 {
    return this._call.outputValues[2].value.toI32();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _prefix(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _bondingCurve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _params(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ReportCall extends EthereumCall {
  get inputs(): ReportCall__Inputs {
    return new ReportCall__Inputs(this);
  }

  get outputs(): ReportCall__Outputs {
    return new ReportCall__Outputs(this);
  }
}

export class ReportCall__Inputs {
  _call: ReportCall;

  constructor(call: ReportCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get status(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get v(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get r(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get s(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }
}

export class ReportCall__Outputs {
  _call: ReportCall;

  constructor(call: ReportCall) {
    this._call = call;
  }
}
